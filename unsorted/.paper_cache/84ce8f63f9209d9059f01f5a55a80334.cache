mABC: Multi-Agent Blockchain-inspired Collaboration for
Root Cause Analysis in Micro-Services Architecture
Wei Zhang1, Hongcheng Guo1‚Ä†, Jian Yang1‚Ä†, Yi Zhang1, Chaoran Yan1, Zhoujin Tian1, Hangyuan Ji1,
Zhoujun Li1, Tongliang Li2, Tieqiao Zheng3, Chao Chen3, Yi Liang3, Xu Shi3,
Liangfan Zheng3, Bo Zhang3
1State Key Laboratory of Complex & Critical Software Environment, Beihang University
2Computer School, Beijing Information Science and Technology University
3Cloudwise Research
{zwpride,hongchengguo,jiaya,zhangyi2021,ycr2345,}@buaa.edu.cn;deritt7@gmail.com;{jhy_1,lizj}@buaa.edu.cn;
tonyliangli@bistu.edu.cn;ztieqiao2006@126.com;{clark.chen,kim.liang,tim.shi,leven.zheng,bowen.zhang}@cloudwise.com;
ABSTRACT
The escalating complexity of micro-services architecture in cloud-
native technologies poses significant challenges for maintaining
system stability and efficiency. To conduct root cause analysis (RCA)
and resolution of alert events, we propose a pioneering framework,
multi-Agent Blockchain-inspired Collaboration for root cause anal-
ysis in micro-services architecture (mABC), to revolutionize the AI
for IT operations (AIOps) domain, where multiple agents based on
the powerful large language models (LLMs) perform blockchain-
inspired voting to reach a final agreement following a standard-
ized process for processing tasks and queries provided by Agent
Workflow. Specifically, seven specialized agents derived from Agent
Workflow each provide valuable insights towards root cause analy-
sis based on their expertise and the intrinsic software knowledge
of LLMs collaborating within a decentralized chain. To avoid po-
tential instability issues in LLMs and fully leverage the transparent
and egalitarian advantages inherent in a decentralized structure,
mABC adopts a decision-making process inspired by blockchain
governance principles while considering the contribution index and
expertise index of each agent. Experimental results on the public
benchmark AIOps challenge dataset and our created train-ticket
dataset demonstrate superior performance in accurately identify-
ing root causes and formulating effective solutions, compared to
previous strong baselines. The ablation study further highlights the
significance of each component within mABC, with Agent Work-
flow, multi-agent, and blockchain-inspired voting being crucial
for achieving optimal performance. mABC offers a comprehensive
automated root cause analysis and resolution in micro-services
architecture and achieves a significant improvement in the AIOps
domain compared to existing baselines1.
KEYWORDS
Root Cause Analysis, Micro-services Architecture, Large Language
Models, Multi-Agent, Blockchain-Inspired Voting
1
INTRODUCTION
Micro-services architecture (MSA) decomposes a large application
into a series of tiny and independent service nodes, each focus-
ing on a specific business function and interacting with others
‚Ä†Corresponding author.
1The code and dataset will be released.
Figure 1: Example of root cause analysis in micro-services
architecture (alert event arises on node A while alert event
root cause node is I with fault propagation path I‚ÜíG‚ÜíD‚ÜíA.
through lightweight communication mechanisms [1‚Äì10]. MAS as
the backbone of scalable and resilient systems in cloud-native tech-
nologies introduces significant challenges in managing distributed
systems [11, 12]. The lifecycle of maintaining system stability in
the micro-services environment is comprised of metric monitor-
ing, alert events, root cause analysis (RCA), and resolution [13‚Äì
15]. Compared with traditional architectures only containing one
central service, root cause analysis and resolution in distributed
deployment practices of micro-services architecture has become
extremely difficult as faults continue to propagate between service
nodes and alarm events become increasingly complex [16, 17].
Root cause analysis (RCA) has been a popular research interest
in the AIOps domain, including both invocation-based and trace-
based approaches [5, 11, 13, 18]. In Figure 1, alert event arises on
A, while alert event root cause node is I with fault propagation
path I‚ÜíG‚ÜíD‚ÜíA. RCA identifies the root cause of faults, I here,
by tracing back to the origin node and even further analyzing met-
rics. Unlike invocation-based methods that focus on neighboring
micro-services, trace-based approaches consider all micro-services
in the trace. However, existing methods such as MicroScope [8],
TraceAnomaly [16], and MEPFL [17] are unable to handle cyclic
dependencies well and rely heavily on data supervision with high
fault coverage. The rapid advancement of large language models
(LLMs) like GPT [19] and their integration with multi-agent has
arXiv:2404.12135v2  [cs.MA]  3 May 2024
Preprint Submitted to arXiv, 2024,
Wei Zhang, et al.
significantly improved their application in AIOps for root cause
analysis [20‚Äì26]. These developments have enabled models to ex-
hibit remarkable analytical and problem-solving capabilities, essen-
tial for identifying and addressing issues in complex micro-services
architecture [27‚Äì30]. Although RCACopilot [29], RCAgent [27],
and D-Bot [30] have improved RCA tools with event matching,
information aggregation, domain knowledge, they struggle with
cross-node failure analysis in complex micro-service architectures.
For this complex scenario in micro-services architectures, we
introduce mABC, a groundbreaking framework designed to revo-
lutionize root cause analysis. By harnessing the power of Large
Language Models (LLMs) within multi-agent blockchain-inspired
collaboration, mABC brings a new level of intelligence and automa-
tion to AIOps. mABC can analyze a wide range of data and navigate
through node dependencies to avoid the limitations of directed
acyclic graphs, and their extensive software knowledge eliminates
the need for high coverage of fault types, unlike supervised learning
models. Specifically, Agent Workflow standardizes task processing
flow through task difficulty and dynamic context perception. Over-
all pipeline encapsulates the flow from alert inception to root cause
analysis within mABC. Step 1: An alert event arises due to access
function blockages or monitoring system alarms in a micro-services
architecture. Step 2: Alert Receiver (ùíú1) forwards the alert event
with the highest priority for the root cause analysis after a priority
selection. Step 3: Process Scheduler (ùíú2) divides unfinished root
cause analyses into sub-tasks, handled by Data Detective (ùíú3), De-
pendency Explorer (ùíú4), Probability Oracle (ùíú5), and Fault Mapper
(ùíú6) for various requests. Step 4: Solution Engineer (ùíú7) develops
resolutions for the root cause referencing previous successful cases.
Seven specialized agents derived from Agent Workflow each provide
valuable insights towards root cause analysis based on their exper-
tise and the intrinsic software knowledge of LLMs collaborating
within a decentralized Agent Chain. To avoid potential instability
issues in LLMs and fully leverage the transparent and egalitarian
advantages inherent in a decentralized structure, mABC adopts a
decision-making process inspired by blockchain governance princi-
ples while considering the contribution index and expertise index
of each agent on {ùíúùëñ}7
ùëñ=1.
Experimental results on the public benchmark AIOps challenge
dataset and our created train-ticket dataset demonstrate superior
performance in accurately identifying root causes and formulating
effective solutions, compared to previous strong baselines. The ab-
lation study further highlights the significance of each component
within mABC, with Agent Workflow, multi-agent, and blockchain-
inspired voting being crucial for achieving optimal performance.
Generally, the main contributions of this work are listed as follows:
‚Ä¢ Advancing Exploration of Â§ßËØ≠Ë®ÄÊ®°Âûã (Large Language Model) and multi-agent in RCA:
The proposed framework, mABC driven by Â§ßËØ≠Ë®ÄÊ®°Âûã (Large Language Model) and multi-
agent collaboration, demonstrates unparalleled accuracy in
RCA and resolution on alert events in a micro-services ar-
chitecture.
‚Ä¢ Blockchain-Inspired Voting: The integration of blockchain-
inspired voting in mABC brings a decentralized and demo-
cratic way to assess agent responses, improving the accuracy
and reliability of root cause analysis through collective in-
telligence and transparent decisions.
‚Ä¢ Creating Train-Ticket Benchmark: The development
of the Train-Ticket benchmark, an open-source evaluation
dataset designed specifically for RCA in complex micro-
services architectures, provides a comprehensive resource
for the research community to develop, test, and benchmark
RCA resolutions, facilitating advancements in RCA.
2
RELATED WORK
2.1
Root Cause Analysis in Micro-Services
Architecture
Root cause analysis in large systems, especially within micro-services
architecture, has become a critical area of focus in AIOps [1‚Äì4, 11,
31, 32]. The intricacies of RCA tasks particularly focus on log, met-
ric, and trace, and previous studies have proposed methods for
root cause analysis using any of these data sources [13‚Äì15, 33].
There are some methods to identify failure patterns [11, 12] or to
explore in service dependency graphs according to metrics and
traces[10, 34]. Those related to NLP for log analysis and anomaly
detection, underline the importance of advanced methodologies[35‚Äì
39]. These include leveraging machine learning for log analysis
[40, 41] and using large language models (LLMs) for enhanced RCA
performance[38, 39, 42].
2.2
Â§ßËØ≠Ë®ÄÊ®°Âûã (Large Language Model) in Micro-Services Architecture
The accelerated advancement in language modeling [19‚Äì21, 23,
26, 28, 38, 43‚Äì49], notably through Transformer-based architec-
tures and large language models (LLMs) like GPT-4 [19] and PaLM
[50], has revolutionized various domains of natural language pro-
cessing and laid the groundwork for their deployment in complex
micro-services architecture [22, 49, 51‚Äì58]. The integration of LLMs
with external tools and APIs further amplifies their functionality,
enabling more effective engagement and manipulation of environ-
ments, particularly in cloud Root Cause Analysis (RCA) [59‚Äì61],
where they enhance precision in log analysis and anomaly detec-
tion. The capabilities exhibited by LLMs have sparked interest in
their application as the core intelligence within autonomous multi-
agent [62]. Researchers have leveraged these models to develop
agents capable of understanding and interacting with their envi-
ronment in a human-like manner [22, 56]. The exploration of au-
tonomous agents in tasks ranging from toy examples to real-world
cloud RCA underscores the versatility and potential of Â§ßËØ≠Ë®ÄÊ®°Âûã (Large Language Model)-based
systems in dynamic environments [63, 64]. This evolution under-
scores a paradigm shift towards leveraging LLMs in micro-services
architecture for enhanced autonomy, intelligence, and efficiency
[29, 31, 65]. Â§ßËØ≠Ë®ÄÊ®°Âûã (Large Language Model) has brought unprecedented vitality and progress to
complex micro-service architecture. A series of tasks have emerged,
including database diagnosis, event processing, root cause analysis
[27, 30, 65, 66], etc. End-to-end intelligent operation and mainte-
nance is booming.
3
METHODOLOGY
3.1
Overview
In this section, we provide a comprehensive overview of mABC,
specifically engineered to pinpoint the root causes of alert events in
a complex micro-services architecture. Illustrated in Figure 2, mABC
mABC: Multi-Agent Blockchain-inspired Collaboration for Root Cause Analysis in Micro-Services Architecture
Preprint Submitted to arXiv, 2024,
Alert
Receiver
Step 1 Alert Event
Generation
Trigger
¬† ¬†Access function¬†
¬†blocked
¬† ¬† ¬† Monitor system
alarm
¬† ¬† ¬†Alert Event
Micro-services
Architeture
Step 2 Alert Event
Prioritization
¬† ¬† ¬†Alert Event
Priority
Selection
¬† ¬† ¬†Alert Event
¬† ¬† ¬†Alert Event
¬† ¬† ¬†Alert Event
¬† ¬† ¬†Alert Event
Step 3 Root Cause
Analysis
¬† ¬†sub-task
¬† ¬†{
}
Conquer
¬† ¬† ¬† sub-task{ }
No
Yes
Finish?
¬† ¬†Root Cause
Develop
¬† ¬†Resolution
]
alert event
resolution
Previous successful cases
Step 4 Root Case
Resolution Development
Data
Detective
Process
Scheduler
Dependency
Explorer
Probability
Oracle
Fault
Mapper
Solution
Engineer
Average Latency:¬†200ms
Traffic:¬†20000 requests/s
Errors:¬†5%
Saturation:¬†Memory: 75%,¬†CPU:
80%,¬†Disk I/O: 60%, Network: 70%
Memory:¬†1.5GB
Node A: 1; Node B: 1;¬†Node C: 1;
Node D: 2;¬†Node E: -1; Node F: -2;
(1 means direct child nodes,¬†-1
indicates the parent node, and other
distances show further relatives.)
Edge A: 90% ; Edge D: 70%;¬†
Edge C: 10%; Edge B: 40%;
(Each edge has a probability that
indicates the probability of the root
cause being at that edge from the
alert node.)
Fault Web
¬† ¬† Create
¬† ¬† Renew
Data
Request
Assistant
Fault Web
Request
Probability
Request
Dependency
Request
Root Cause
Analysis
¬† ¬†sub-task
¬† ¬†{
}
¬† ¬†sub-task
¬† ¬†{
}
¬† ¬†sub-task
¬† ¬†{
}
Figure 2: Overview of mABC. Overall pipeline encapsulates the flow from alert inception to root cause analysis within mABC.
Step 1: An alert event arises due to access function blockages or monitoring system alarms in a micro-services architecture.
Step 2: Alert Receiver (ùíú1) forwards the alert event with the highest priority for the root cause analysis after a priority selection.
Step 3: Process Scheduler (ùíú2) divides unfinished root cause analyses into sub-tasks, handled by Data Detective (ùíú3), Dependency
Explorer (ùíú4), Probability Oracle (ùíú5), and Fault Mapper (ùíú6) for various requests. Step 4: Solution Engineer (ùíú7) develops
resolutions for the root cause referencing previous successful cases.
¬† Question
Reasoning
Trace
Action
Â§ßËØ≠Ë®ÄÊ®°Âûã (Large Language Model)
Observation
Enviroment
ReAct Answer
Direct Answer
Zero shot
Chain of
Thought
X of
Thought
Reasoning
Trace
Â§ßËØ≠Ë®ÄÊ®°Âûã (Large Language Model)
¬† Answer
Figure 3: Two distinct workflows of agent. ReAct answer
involves an iterative cycle of thought, action, and observation
until a satisfactory answer is reached, while responses are
directly formulated based on the prompt provided following
the direct answer.
introduces seven agents: Alert Receiver, Process Scheduler, Data
Detective, Dependency Explorer, Probability Oracle, Fault Mapper,
and Solution Engineer. These agents collaborate transparently and
equally, invoking each other to address alert events in the mABC
pipeline. In micro-services architecture, alert events can arise from
user-side blocked function access and monitoring system alarms,
such as increased login response times and network latency in the
login node.
3.2
Agent Workflow
Agent Workflow, foundational to the framework, enables all agents
to complete their tasks effectively, adhering to a prescribed method-
ology. The differences among agents within this framework are
limited to the types of questions they address and the tools they
utilize. In Figure 3, Agent Workflow assesses the complexity of each
question to determine the most appropriate response method. For
questions that require real-time data or additional information,
Agent Workflow activates the ReAct answer workflow, which in-
volves an iterative cycle of thought, action, and observation until
a satisfactory answer is reached. Conversely, when no external
tools are necessary, Agent Workflow defaults to the direct answer
workflow, where responses are directly formulated based on the
prompt provided.
3.3
Multi-Agent
In this section, we provide a detailed and thorough introduction of
agents in mABC. Alert Receiver quickly prioritizes incoming alerts.
Process Scheduler smoothly divides tasks and asks for assistance
from other agents. Data Detective, Dependency Explorer Probability
Oracle and Fault Mapper gather data, analyze dependencies, as-
sess fault probabilities, visualize fault networks. Finally, Solution
Engineer analyzes root causes and develops resolutions.
3.3.1
Alert Receiver. In Figure 2, Alert Receiver plays a crucial role
in the pipeline. The responsibility of Alert Receiver is to sort the
received alert events based on the time, urgency, and scope of
impact. After determining the priority of the alert events, Alert
Preprint Submitted to arXiv, 2024,
Wei Zhang, et al.
Receiver dispatches the most urgent and widely impacting alert
events to Process scheduler further processing following the pipeline.
3.3.2
Process Scheduler. In Figure 2, Process Scheduler orchestrates
various sub-tasks to efficiently resolve alert events. When an alert
arrives from Alert Receiver, Process Scheduler kick-starts a compre-
hensive process that includes data gathering, fault web construction,
dependency analysis, and probability scoring, engaging with spe-
cialized agents for each task. These agents, Data Detective for data
collection, Dependency Explorer for querying node dependencies,
Probability Oracle for assessing node probabilities, and Fault Mapper
for constructing fault impact, provide critical insights that are then
funneled to Solution Engineer. Solution Engineer conducts root cause
analysis and devises solutions. Throughout this process, Process
Scheduler checks whether the root cause has been identified after
each sub-task; if not, it iterates, generating new sub-tasks and solic-
iting further assistance from the agents until the root cause analysis
is finalized. Ultimately, Process Scheduler delivers the root cause, an
updated fault web, and a resolution strategy, thereby concluding
the alert event handling process and setting the stage for the next
alert event.
3.3.3
Data Detective. In Figure 2, Data Detective plays a pivotal
role in the pipeline, tasked with collecting data from designated
nodes within a specific time window as dictated by Process Scheduler.
It gathers comprehensive information, including but not limited
to average latency, traffic volume, error rates, resource saturation
levels, and concurrent user counts. This wealth of data enables
mABC to accurately identify the root cause of issues, leading to the
development of effective repair strategies or mitigation actions. To
facilitate thorough analysis and maximize the informational value
within constrained context windows, Data Detective employs a Data
Collection Tool and a Data Analysis Tool. These tools are engineered
to exclude non-essential data and apply fuzzy matching based on
critical parameters such as nodes and time. Data Analysis Tool
further processes this data into easily comprehensible charts and
reports, thereby democratizing data understanding and decision-
making across mABC. This design strategy ensures that LLMs are
shielded from the complexities of diverse data sets, simplifying
the task for Data Detective and eliminating inefficiencies in data
exploration and analysis.
3.3.4
Dependency Explorer. Dependency Explorer is an expert within
the pipeline for analyzing the dependencies among internal nodes
of the micro-services architecture. In Figure 2, upon receiving an
alert event that requires further analysis from Process Scheduler,
Dependency Request is sent to Dependency Explorer, containing in-
formation about the specific node and the time of the alert. Utilizing
a query tool, in conjunction with global topology and calls within
the time window, Dependency Explorer precisely identifies the direct
and indirect dependent nodes for the specific node and returns to
Process Scheduler, which is vital for identifying fault path, marking
impacted nodes, and setting the stage for further root analysis and
resolution.
3.3.5
Probability Oracle. Probability Oracle evaluates the probabil-
ity of fault across different nodes within a micro-services architec-
ture. Receiving requests from Process Scheduler and analyzing the
specified list of nodes to determine the failure probability of each
node, which involves checking whether each node is accessible.
For inaccessible nodes, a high failure probability is assigned by
default. For accessible nodes, the failure probability is evaluated
based on performance metrics such as response time, error rate,
or resource utilization using a computational model. By analyzing
the correlation of data between nodes, for example, finding that
the response time of a node is positively correlated with the error
rate of another node (Pearson correlation coefficient close to 1),
it indicates that the performance degradation of the node may be
related to the failure of another node. Based on the results of the
correlation analysis, the failure probabilities are adjusted accord-
ingly by increasing the probability of highly correlated nodes and
decreasing the probability of other nodes. Finally, Probability Oracle
sends these failure probabilities back to Process Scheduler, providing
crucial data for updating the failure web, root cause analysis, and
resolution development.
3.3.6
Fault Mapper. Fault Mapper plays a role in visualizing and
updating data within the pipeline. Fault Mapper receives fault prob-
ability information from Probability Oracle and updates Fault Web
accordingly. In Figure 2, when Fault Web needs to be updated, Pro-
cess Scheduler issues a Fault Web Request, which includes nodes
and their corresponding fault probabilities. Fault Mapper creates or
renews Fault Web based on this information to visually represent
the fault probabilities between different nodes. Fault Web not only
displays the alert source node but also depicts other related nodes
and the fault probabilities of their connecting edges. Fault Mapper
ensures that Process Scheduler can make decisions based on the
most up-to-date information, thereby guiding Solution Engineer to
develop appropriate resolutions.
3.3.7
Solution Engineer. In Figure 2, Solution Engineer is responsi-
ble for the final root cause analysis and development of solutions
in the pipeline. Solution Engineer receives Root Cause Analysis and
Solution Requests from Process Scheduler and then decides on the
course of action based on the available node data. If node data
is available, Solution Engineer conducts a metric-level analysis by
using historical data and performance metrics. If there is no acces-
sible node data, Solution Engineer performs a node-level analysis
by examining the topology of micro-services architecture to iden-
tify the impact of the fault. Solution Engineer references previous
successful cases, like in Table 1, to guide the development of the
current solution and returns this information for further action and
the conclusion of the process ensuring that the proposed resolution
is practical and effective.
3.4
Blockchain-Inspired Voting
3.4.1
Blockchain Communication. Although Â§ßËØ≠Ë®ÄÊ®°Âûã (Large Language Model) has rapidly de-
veloped, it is still sensitive to generating content that may be fluent
but lacks authenticity. To enhance the correctness of each answer,
we have designed blockchain-inspired voting as a reflection for any
answer to any question from any agent. The agents in the mABC
are transparent and equal to each other, despite their different re-
sponsibilities, and compose a decentralized structure Agent Chain.
Blockchain, a decentralized structure, follows governance guide-
lines divided into on-chain and off-chain governance. On-chain
mABC: Multi-Agent Blockchain-inspired Collaboration for Root Cause Analysis in Micro-Services Architecture
Preprint Submitted to arXiv, 2024,
Table 1: Examples of Alert Events
Alert Events
Description
Tablespace High Utilization
Indicates extensive data occupation in tablespace, potentially degrading database performance.
Database Connectivity Fault
Signifies possible connection issues due to excessive connections, impacting response and transactions.
CPU Resource Insufficiency
High session average CPU time suggest significant CPU occupation, risking performance and stability.
Memory Overflow
Shows memory usage exceeding safe limits, risking performance degradation or crashes.
Disk IO Performance Fault
Abnormal increase in physical read rates, indicating potential disk IO issues.
governance is more democratic and transparent, allowing partici-
pants to trust each other and leaving decision-making power in the
hands of decentralized entities. Agent Chain in mABC follows the
decisions of on-chain governance to better leverage the advantages
of decentralization.
3.4.2
Voting Weights. Voting weight is determined by ùë§ùëê‚àóùë§ùëí,
where contribution index (ùë§ùëê) reflects a level of activity and effec-
tiveness in proposal contributions and voting for the agent, while
expertise index (ùë§ùëí) is determined by the professional contributions
of the agent in a specific field and the quality of their actions.
To better encapsulate the dynamics of the contribution and ex-
pertise indices with an emphasis on fairness and continuous en-
gagement, contribution index ùë§ùëêis presented as follows:
ùë§ùëê= min  ùë§ùëê¬∑ (1 ‚àíùõø) + Œîùë§ùëê, ùë§ùëêmax

(1)
where ùë§ùëêdenotes contribution index, initially set to 1.0. ùõørepre-
sents a random decay rate, ranging from 0 to 0.03, applied after
each voting event to encourage ongoing contribution and prevent
the concentration of power. Œîùë§ùëêis the increase 0.1 in contribution
index resulting from active participation in voting (excluding ab-
stentions) and proposal submission.ùë§ùëêmax is the upper limit for both
contribution index and expertise index, set to 1.5 to ensure fairness.
To ensure fairness within the system and encourage informed
decision-making, expertise index ùë§ùëíis governed by the following
formula:
ùë§ùëí= min  ùë§ùëí+ Œîùë§ùëí, ùë§ùëímax

(2)
where ùë§ùëírepresents expertise index, which does not undergo au-
tomatic decay, reflecting the accumulated expertise of an Agent
over time. Œîùë§ùëíis the change in expertise index, which increases
by 0.01 if the voting choice of agent aligns with the final outcome
and decreases by 0.01 otherwise. This mechanism rewards accu-
rate predictions and penalizes inaccuracies. ùë§ùëímax is the upper limit
for expertise index, set to 1.5 to maintain fairness by preventing
disproportionate influence from highly experienced agents.
3.4.3
Voting Process. On Agent Chain, every agent is entitled to
participate in voting. The voting process works in Figure 4: When
ùíúùë•‚àà{ùíúùëñ}7
ùëñ=1 gets an answer ùê¥for question ùëÑ, all agents on the
chain will examine ùê¥and face the choice of whether to initiate
a vote on ùëã‚àíùëÑ‚àíùê¥. If no Agent initiates a vote, the answer is
accepted. If ùíúùë¶‚àà{ùíúùëñ}7
ùëñ=1 requires a vote, all agents on the agent
chain will vote on ùíúùë¶‚àíùíúùë•‚àíùëÑ‚àíùê¥, with the voting options being
For, Abstain, and Against. If the vote passes, ùíúùë•will re-answer
Question ùëÑto generate a new Answer ùê¥‚Ä≤.
Object
Question Q
Options
Answer A
Initial a Vote
For
Abstain
Against
Agent Chain Vote
Re-answer A'
Next
Figure 4: Vote process on Agent Chain
3.4.4
Voting Outcome Determination. The support rate (ùë†) and the
participation rate (ùëù) are calculated as follows:
ùë†=
√çùëõ
ùëñ=1 1(ùë§ùëñ)
√çùëõ
ùëñ=1 ùë§ùëñ
(3)
ùëù=
√çùëõ
ùëñ=1 1‚Ä≤(ùë§ùëñ)
√çùëõ
ùëñ=1 ùë§ùëñ
(4)
where, ùëõis the total number of agents to vote on Agent Chain, voteùëñ
is the vote of the ùëñ-th agent, and ùë§ùëñis the weight of the vote of ùëñ-th
agent. A proposal is considered passed if ùë†‚â•ùõº& ùëù‚â•ùõΩ, where ùõº
and ùõΩare predefined threshold percentages. The indicator function
1(¬∑) outputs ùë§ùëñif ùëñ-th agent votes For and 0 if ùëñ-th agent votes
Abstain, and Against. The indicator function 1‚Ä≤(¬∑) outputs ùë§ùëñif
ùëñ-th agent votes For and Against, 0 if ùëñ-th agent votes Abstain.
4
EXPERIMENTS
4.1
Datasets
The experiments are performed on two datasets, which are de-
scribed in detail.
4.1.1
Train-Ticket Dataset. Our dataset is built on Train-Ticket [67,
68], an open-source micro-service benchmark system developed
by the CodeWisdom team at Fudan University following industry
micro-service practices. As shown in Figure 5, Train-Ticket is a
train booking system deployed on Kubernetes and integrated with
monitoring and analysis tools. It comprises 41 micro-services that
provide typical high-concurrency train ticket booking functions,
such as ticket query, ticket reservation, payment, ticket change, and
user notification.
Preprint Submitted to arXiv, 2024,
Wei Zhang, et al.
Table 2: Train-Ticket Process Descriptions
Process
Description
Admin Operations
Admin login, site, and route addition, train information addition, user and contact addition, multiple queries (routes, trains, sites, etc.), updates, deletions, repeat queries.
Normal Flow
User registration and login, ticket availability search, ticket booking, order status refresh, order payment, and ticket check-in.
Re-book Flow
Registration and login, availability search, booking, latest order status refresh, re-booking, new order payment (if applicable), check-in.
Re-Book Fail Flow
Registration and login, availability search and booking, order status refresh, successful first re-booking, order payment, failed second re-booking attempt.
Search Fail to Add
User registration and login, failed ticket search (due to missing stations), admin adds missing info, ticket research and booking, latest order status refresh.
Consign Preserve
User registration and login, ticket search and booking, order status refresh, order payment, luggage consignment addition, and check-in.
Preserve Successfully
User registration and login, ticket availability search and booking, order status refresh, payment, and check-in.
travel-service
basic-service
seat-service
station-service
route-service
price-service
order-service
mysql
train-service
gateway
Entrance
node
Circular
dependency
Figure 5: An example of Train-Ticket architecture (query
remaining tickets). basic service relies on seat service, or-
der service, and others. A circular dependency of basic-
service‚Üíorder-service‚Üíseat service‚Üíbasic-service brings a
new challenge for root cause analysis.
Table 3: Types of Faults Injected in the Experiment
Fault Category
Fault Case Examples
Network
High packet loss, high retransmission rates, DNS failures,
bandwidth saturation, high TCP connection setup delays
Storage
High I/O latency
CPU
High CPU usage by the code itself, CPU contention from
other processes
Memory
High frequency of FULL GC, memory contention from
other processes
Code
Exceptions thrown by the code leading to error codes,
HTTP requests, returning error codes
To simulate the operation of the actual system, we have designed
7 processes and 100 virtual users. Table 2 illustrates each process
implementing a specific sequence of operations by calling different
combinations of functions. These functions range from user reg-
istration, login, querying, booking, changing tickets, and adding
extra services such as baggage delivery. This covers a variety of
common operation scenarios in train ticket management systems.
Each user will randomly select a process to execute to access the
system.
Using ChaosBlade[69], we introduce faults into the Train-Ticket
System following Table 3. ChaosBlade is an experimental injection
tool open-sourced by Alibaba. It follows the principles of chaos en-
gineering and experimental models. We thus constructed a dataset
of 233,111 call chains consisting of 800,656 call spans embedded in
112 time periods and 53 nodes, including 900 alert events directly
caused by the alert nodes and 294 alert events induced by external
nodes.
Table 4: Summary of Alert Events in 2020 International
AIOps Challenge Dataset
Alert Node
Alert Events Type
Count
os_021
CPU
8434
docker_006
Database Connectivity
130
docker_006
Database Local Method
7174
os_021
Operate System
6352
docker_008
Database Connectivity
233
docker_008
Database Local Method
7552
docker_005
Database Connectivity
211
docker_005
Database Local Method
9684
os_022
CPU
15099
docker_001
Network
2
os_022
Operate System
109
docker_004
Network
124
4.1.2
2020 International AIOps Challenge Dataset. Similar to Train-
Ticket Dataset mentioned above, 2020 AIOps International Chal-
lenge Dataset aims to discover alert events and their root causes in
micro-service applications, such as cloud platform services, which
include containers, service meshes, micro-service, and variable in-
frastructures. The dataset includes 14 days of system logs totaling
145,907,050 entries.
In Table 4, the types of alert events mainly include container
CPU utilization, container memory utilization, database connection
limit, database close, host network delay, and container network
loss. All types of alert events are distributed across various nodes
of the system.
4.2
Evaluation Metrics
To objectively evaluate the effectiveness of mABC in identifying and
handling anomalies in complex micro-service systems, we adopt
two complementary metrics: Root Cause Result Accuracy (RA) and
Root Cause Path Accuracy (PA).
mABC: Multi-Agent Blockchain-inspired Collaboration for Root Cause Analysis in Micro-Services Architecture
Preprint Submitted to arXiv, 2024,
Table 5: Main Results On Train-Ticket Dataset and AIOps challenge Dataset
Model
Base
Train-Ticket Dataset
AIOps Challenge Dataset
Average
RA
PA
Average
RA
PA
Average
Decision Tree [70]
-
31.8
29.7
30.8
23.3
21.7
22.5
26.6
ReAct [26]
GPT-3.5-Turbo
26.8
21.8
24.3
20.1
17.7
18.9
21.6
ReAct [26]
GPT-4-Turbo
32.0
27.9
30.0
26.5
23.4
25.0
27.5
mABC
GPT-3.5-Turbo
58.1
52.8
55.5
51.1
46.7
48.9
52.2
mABC
GPT-4-Turbo
72.4
66.2
69.3
63.5
57.3
60.4
64.9
4.2.1
Root Cause Result Accuracy (RA). Following the previous
work [30, 33], we use result accuracy (RA) to quantify the precision
of mABC in finding the root cause.
RA = ùê¥ùëê‚àíùúé¬∑ ùê¥ùëñ
ùê¥ùë°
(5)
where ùê¥ùëêdenotes the number of correct causes, ùê¥ùë°denotes the
total number of causes, ùê¥ùëñdenotes the number of wrongly detected
causes, and ùúéis a hyper-parameter with 0.1 as the default value
because we recognize redundant causes is less harmful than missing
causes. Therefore, we limit the identification to a maximum of 4
root causes for an anomaly.
4.2.2
Root Cause Path Accuracy (PA). To assess the accuracy of the
inference path between alert nodes and root cause nodes identified
by mABC and how accurately these inferred paths align with the
actual root cause paths in the system, we use the root cause path
accuracy (PA) metric, which aims to measure the effectiveness of
mABC in tracing the correct path from the symptoms (alerts) back
to the root causes. The formula for PA similar to RA focuses on
path accuracy as:
PA = ùëÉùëê‚àíùúè¬∑ ùëÉùëñ
ùëÉùë°
(6)
where ùëÉùëêdenotes the number of correctly identified paths leading
to the root cause, ùëÉùë°is the total number of actual root cause paths
present, ùëÉùëñdenotes the number of incorrectly inferred paths, which
do not align with the actual root cause paths, and ùúèis a hyper-
parameter designed to penalize the inaccuracies in path inference,
with a default value of 0.2, reflecting the understanding that inaccu-
rately inferred paths are less detrimental than completely missing
the correct paths, but there is a stronger emphasis on precision due
to the potential complexity and relevance of paths.
4.3
Implementation and Configuration
We implement mABC on Ubuntu 22.04, equipped with an Intel (R)
Xeon (R) Gold 6348 CPU @ 2.60GHz, four NVIDIA A100 GPUs (80
GB), and 528 GB of memory. The software setup includes NVIDIA-
SMI version 535.104.05 and CUDA version 12.3. In all experiments,
support threshold ùõºand participation threshold ùõΩare set to 0.5.
4.4
Main Results
In Table 5, we carefully conduct experiments to evaluate mABC
against other baseline models on two distinct datasets: train-ticket
dataset and AIOps challenge dataset. The experiments are designed
to assess the efficacy of the models in root cause analysis and
decision-making tasks within the AIOps domain based on RA and
PA, along with their average performance. The results from the table
indicate that mABC, particularly when utilizing GPT-4-Turbo, sig-
nificantly outperforms the other models on both datasets, achieving
the highest scores in all evaluated metrics. This superior perfor-
mance underscores the effectiveness of mABC in handling complex
AIOps tasks. The GPT-3.5-Turbo variant of mABC also demonstrates
strong results, although it does not reach the same heights as its
GPT-4-Turbo counterpart. ReAct [26], despite being grounded in
advanced GPT architectures, does not match the performance of
mABC, suggesting that the methodology of latter is better suited
for the demands of AIOps. The inclusion of the Decision Tree [70]
serves as a benchmark, illustrating the advancements and advan-
tages of neural network-based solutions over traditional methods
in the field. Overall, the table summarizes the comparative success
of mABC in advancing automated root cause analysis in AIOps,
with its state-of-the-art GPT-4-Turbo variant leading the way.
Table 6: Decision Efficiency Evaluation
Model
Base
Train-Ticket Dataset
AIOps Challenge Dataset
PR
APL
PR
APL
Decision Tree [70]
-
62.4
12.1
53.8
13.4
ReAct [26]
GPT-3.5-Turbo
41.7
15.9
38.0
16.2
ReAct [26]
GPT-4-Turbo
47.1
13.9
44.2
14.3
mABC
GPT-3.5-Turbo
58.1
52.8
51.1
46.7
mABC
GPT-4-Turbo
73.0
10.4
68.8
11.7
Table 7: Human Evaluation
Model
Base
R-Useful (Train)
R-Useful (AIOps)
Decision Tree [70]
-
-
-
ReAct [26]
GPT-3.5-Turbo
2.1
2.1
ReAct [26]
GPT-4-Turbo
2.4
2.3
mABC
GPT-3.5-Turbo
3.1
3.2
mABC
GPT-4-Turbo
4.2
3.6
5
ANALYSIS
5.1
Decision Efficiency.
Following RCAgent [27], we use pass rate (PR) and average path
length (APL) to evaluate the thinking trajectory steps of mABC
in accomplishing the task, considering the validness of action tra-
jectories and stability of the autonomous agent. PR calculated by
Preprint Submitted to arXiv, 2024,
Wei Zhang, et al.
Table 8: Component Impact Evaluation
Model
Train-Ticket Dataset
AIOps Challenge Dataset
RA
PA
PR
APL
R-Useful
RA
PA
PR
APL
R-Useful
mABC
72.4
66.2
84.7
8.6
4.2
63.5
57.3
79.3
9.1
3.6
mABC w/o Agent Workflow
64.2
56.7
77.7
9.8
3.5
54.6
50.3
71.3
10.7
3.3
mABC w/o Multi-Agent
38.4
33.0
52.9
13.7
2.8
32.4
28.8
50.1
13.7
2.7
mABC w/o Voting
62.8
57.9
75.7
10.9
3.3
58.1
54.7
68.0
10.2
3.4
ùëÅùëù
ùëÅùë°, where ùëÅùëùdenotes the number of trajectories completed within
ùúÉsteps, ùúÉtypically set to 15, and ùëÅùë°denotes the total number of
trajectories. Besides, APL is denoted by
√çùëÅùëù
ùëò=1 ùêøùëò
ùëÅùëù
, where ùêøùëòdenotes
the path length of the ùëò-th successful trajectory.
In Table 6, the results confirm that mABC exhibits superior de-
cision efficiency, as evidenced by its high pass rate (PR) and low
average path length (APL) across both datasets, which demonstrates
that mABC not only successfully completes tasks with a higher prob-
ability but also does so with fewer steps, indicating a more efficient
and stable decision-making process. The GPT-4-Turbo variant, in
particular, showcases the most effective decision trajectories, sug-
gesting that mABC is highly capable of generating efficient actions
in the context of root cause analysis in a micro-services architecture.
mABC delivers outstanding decision efficiency, with GPT-4-Turbo
leading the charge in fostering both effective and stable decision-
making processes in the AIOps domain.
5.2
Human evaluation.
The evaluation was conducted based on a random selection of 200
completed cases, which included analyses of root causes, pathways,
and resolutions. We invited 10 AIOps experts to rate each case on
a scale from 1 to 5, where 1 signifies very useless and 5 denotes
very useful. Subsequently, we calculated the average rating for
each case to derive Resolution Evaluation Metrics (R-Useful) score.
In a more detailed examination of the human evaluation results
presented in Table 7, it is evident that the responses from AIOps
experts reveal a strong preference for the resolutions generated by
the mABC model, especially when augmented with GPT-4-Turbo.
The superior R-Useful scores for mABC with GPT-4-Turbo across
both datasets not only demonstrate its exceptional capability in
crafting highly useful solutions but also indicate that the approach
of model resonates well with the expert understanding and expecta-
tions in the complex AIOps domain. The moderate R-Useful scores
assigned to the ReAct suggest that while they are capable of gen-
erating resolutions, there is a notable gap in terms of meeting the
nuanced needs of AIOps experts. The decision tree model could not
be evaluated for R-Useful due to its inability to generate resolutions.
The human evaluation clearly confirms that mABC, when paired
with GPT-4-Turbo, outshines the competition. It is highly effective
at developing solutions that align with expert insights and shows
great promise in improving decision-making in the AIOps domain,
potentially enhancing overall performance and productivity.
5.3
Component Impact.
In this section, we verify the impact of three main components
in mABC, i.e., mABC without Agent Workflow (based on ReAct
rather than Agent Workflow), mABC without Multi-Agent (Agent
Workflow), and mABC without Blockchain-Inspired Voting.
In Table 8, it is evident that mABC in its complete form demon-
strates superior performance across all metrics on both datasets,
highlighting the importance of integrating all components for opti-
mal functionality. The removal of Agent Workflow leads to a notice-
able decline in performance metrics, indicating the role of Agent
Workflow in enhancing the effectiveness of model. Similarly, lim-
iting the framework to only a Single Agent significantly reduces
the capability of model to effectively address AIOps tasks, as seen
by the lowest scores in all evaluated metrics. Lastly, excluding the
Blockchain-Inspired Voting component also results in decreased
performance, albeit to a lesser extent than removing Agent Work-
flow or resorting to a Single Agent setup, underscoring the value
of the voting mechanism in refining and validating the resolutions
generated by the framework.
Component impact evaluation clearly demonstrates the signifi-
cance of each individual component within mABC. The integration
of Agent Workflow contributes substantially to the ability of model
to generate effective solutions by providing a structured approach
to problem-solving. Multi-Agent architecture plays a crucial role in
capturing diverse perspectives and enhancing the robustness of the
decision-making process. Meanwhile, the Blockchain-Inspired Vot-
ing mechanism is essential for achieving consensus and ensuring
the reliability of the final decisions. Together, these components
work in synergy to elevate the performance of mABC, making it a
powerful tool in the AIOps domain. The results underscore the im-
portance of a holistic design where each component complements
and reinforces the others, leading to a more effective and reliable
root cause analysis in a micro-services architecture.
6
CONCLUSION
In this paper, we introduce mABC, a novel framework aimed at im-
proving alert incident resolution in complex micro-services through
a blend of multi-agent, LLMs, and a unique blockchain voting.
Then, we develop train-ticket benchmark, an open-source eval-
uation dataset designed specifically for RCA in complex micro-
services architectures. Experimental results on the public bench-
mark AIOps challenge dataset and our created train-ticket dataset,
mABC demonstrated effectiveness in identifying root causes and
offering solutions, with its Agent Workflow and voting mechanism
playing crucial roles. mABC streamlines root cause analysis, boost-
ing system reliability and operational efficiency. Our future efforts
will focus on enhancing its components, incorporating more data
sources, and improving agent collaboration. Our goal is to make
mABC an essential tool for addressing various IT operations chal-
lenges.
mABC: Multi-Agent Blockchain-inspired Collaboration for Root Cause Analysis in Micro-Services Architecture
Preprint Submitted to arXiv, 2024,
REFERENCES
[1] A. Alquraan, H. Takruri, M. Alfatafta, and S. Al-Kiswany, ‚ÄúAn analysis of network-
partitioning failures in cloud systems,‚Äù in Proceedings of the 13th USENIX Confer-
ence on Operating Systems Design and Implementation (OSDI‚Äô18), 2018.
[2] Y. Gao, W. Dou, F. Qin, C. Gao, D. Wang, J. Wei, R. Huang, L. Zhou, and Y. Wu,
‚ÄúAn empirical study on crash recovery bugs in large-scale distributed systems,‚Äù in
Proceedings of the 26th ACM joint meeting on european software engineering con-
ference and symposium on the foundations of software engineering (ESEC/FSE‚Äô18),
2018.
[3] Y. Zhang, J. Yang, Z. Jin, U. Sethi, K. Rodrigues, S. Lu, and D. Yuan, ‚ÄúUnderstanding
and detecting software upgrade failures in distributed systems,‚Äù in Proceedings
of the ACM SIGOPS 28th Symposium on Operating Systems Principles (SOSP‚Äô21),
2021.
[4] H. Liu, S. Lu, M. Musuvathi, and S. Nath, ‚ÄúWhat bugs cause production cloud
incidents?‚Äù in Proceedings of the Workshop on Hot Topics in Operating Systems
(HotOS‚Äô19), 2019.
[5] P. Jamshidi, C. Pahl, N. C. Mendon√ßa, J. Lewis, and S. Tilkov, ‚ÄúMicroservices: The
journey so far and challenges ahead,‚Äù IEEE Software, vol. 35, no. 3, pp. 24‚Äì35,
2018.
[6] M. Kim, R. Sumbaly, and S. Shah, ‚ÄúRoot cause detection in a service-oriented
architecture,‚Äù ACM SIGMETRICS Performance Evaluation Review, vol. 41, no. 1,
pp. 93‚Äì104, 2013.
[7] K. Wang, C. Fung, C. Ding, P. Pei, S. Huang, Z. Luan, and D. Qian, ‚ÄúA method-
ology for root-cause analysis in component based systems,‚Äù in 2015 IEEE 23rd
International Symposium on Quality of Service (IWQoS).
IEEE, 2015, pp. 243‚Äì248.
[8] J. Lin, P. Chen, and Z. Zheng, ‚ÄúMicroscope: Pinpoint performance issues with
causal graphs in micro-service environments,‚Äù in Service-Oriented Computing:
16th International Conference, ICSOC 2018, Hangzhou, China, November 12-15,
2018, Proceedings 16.
Springer, 2018, pp. 3‚Äì20.
[9] P. Wang, J. Xu, M. Ma, W. Lin, D. Pan, Y. Wang, and P. Chen, ‚ÄúCloudranger: Root
cause identification for cloud native systems,‚Äù in 2018 18th IEEE/ACM International
Symposium on Cluster, Cloud and Grid Computing (CCGRID).
IEEE, 2018, pp.
492‚Äì502.
[10] M. Ma, J. Xu, Y. Wang, P. Chen, Z. Zhang, and P. Wang, ‚ÄúAutomap: Diagnose
your microservice-based web applications automatically,‚Äù in Proceedings of The
Web Conference 2020, 2020.
[11] M. Ma, Z. Yin, S. Zhang, S. Wang, C. Zheng, X. Jiang, H. Hu, C. Luo, Y. Li, N. Qiu
et al., ‚ÄúDiagnosing root causes of intermittent slow queries in cloud databases,‚Äù
Proceedings of the VLDB Endowment (VLDB‚Äô20), 2020.
[12] Y. Zhang, Z. Guan, H. Qian, L. Xu, H. Liu, Q. Wen, L. Sun, J. Jiang, L. Fan, and M. Ke,
‚ÄúCloudrca: a root cause analysis framework for cloud computing platforms,‚Äù in
Proceedings of the 30th ACM International Conference on Information & Knowledge
Management, 2021.
[13] S. Ghosh, M. Shetty, C. Bansal, and S. Nath, ‚ÄúHow to fight production incidents? an
empirical study on a large-scale cloud service,‚Äù in Symposium on Cloud Computing,
2022, pp. 126‚Äì141.
[14] D. Yuan, Y. Luo, X. Zhuang, G. R. Rodrigues, X. Zhao, Y. Zhang, P. Jain, and
M. Stumm, ‚ÄúSimple testing can prevent most critical failures: An analysis of pro-
duction failures in distributed data-intensive systems.‚Äù in Proceedings of the 12th
USENIX Symposium on Operating Systems Design and Implementation (OSDI‚Äô14),
2014.
[15] T. Leesatapornwongsa, C. A. Stuardo, R. O. Suminto, H. Ke, J. F. Lukman, and H. S.
Gunawi, ‚ÄúScalability bugs: When 100-node testing is not enough,‚Äù in Proceedings
of the 16th Workshop on Hot Topics in Operating Systems (HotOS‚Äô17), 2017.
[16] P. Liu, H. Xu, Q. Ouyang, R. Jiao, Z. Chen, S. Zhang, J. Yang, L. Mo, J. Zeng,
W. Xue, and D. Pei, ‚ÄúUnsupervised detection of microservice trace anomalies
through service-level deep bayesian networks,‚Äù in 2020 IEEE 31st International
Symposium on Software Reliability Engineering (ISSRE), 2020, pp. 48‚Äì58.
[17] X. Zhou, X. Peng, T. Xie, J. Sun, C. Ji, D. Liu, Q. Xiang, and C. He, ‚ÄúLatent error
prediction and fault localization for microservice applications by learning from
system trace logs,‚Äù in Proceedings of the 2019 27th ACM Joint Meeting on European
Software Engineering Conference and Symposium on the Foundations of Software
Engineering, 2019, pp. 683‚Äì694.
[18] Z. Li, J. Chen, R. Jiao, N. Zhao, Z. Wang, S. Zhang, Y. Wu, L. Jiang, L. Yan, Z. Wang,
Z. Chen, W. Zhang, X. Nie, K. Sui, and D. Pei, ‚ÄúPractical root cause localization
for microservice systems via trace analysis,‚Äù in 2021 IEEE/ACM 29th International
Symposium on Quality of Service (IWQOS), 2021, pp. 1‚Äì10.
[19] OpenAI, ‚ÄúGpt-4 technical report,‚Äù 2023.
[20] J. Wei, M. Bosma, V. Y. Zhao, K. Guu, A. W. Yu, B. Lester, N. Du, A. M. Dai, and
Q. V. Le, ‚ÄúFinetuned language models are zero-shot learners,‚Äù 2022.
[21] T. Kojima, S. S. Gu, M. Reid, Y. Matsuo, and Y. Iwasawa, ‚ÄúLarge language models
are zero-shot reasoners,‚Äù arXiv preprint arXiv:2205.11916, 2022.
[22] J. Wei et al., ‚ÄúChain of thought prompting elicits reasoning in large language
models,‚Äù arXiv preprint arXiv:2201.11903, 2022.
[23] X. Wang, J. Wei, D. Schuurmans, Q. Le, E. Chi, and D. Zhou, ‚ÄúSelf-consistency
improves chain of thought reasoning in language models,‚Äù arXiv preprint
arXiv:2203.11171, 2022.
[24] N. Shinn, F. Cassano, E. Berman, A. Gopinath, K. Narasimhan, and S. Yao, ‚ÄúRe-
flexion: Language agents with verbal reinforcement learning,‚Äù in Advances in
Neural Information Processing Systems, 2023.
[25] P. Lewis, E. Perez, A. Piktus, F. Petroni, V. Karpukhin, N. Goyal, H. K√ºttler,
M. Lewis, W.-t. Yih, T. Rockt√§schel et al., ‚ÄúRetrieval-augmented generation for
knowledge-intensive nlp tasks,‚Äù in Advances in Neural Information Processing
Systems, 2020, pp. 9459‚Äì9474.
[26] S. Yao, J. Zhao, D. Yu, N. Du, I. Shafran, K. Narasimhan, and Y. Cao, ‚ÄúReact:
Synergizing reasoning and acting in language models,‚Äù 2023.
[27] Z. Wang, Z. Liu, Y. Zhang, A. Zhong, L. Fan, L. Wu, and Q. Wen, ‚ÄúRcagent: Cloud
root cause analysis by autonomous agents with tool-augmented large language
models,‚Äù 2023.
[28] Y. Shen, K. Song, X. Tan, D. Li, W. Lu, and Y. Zhuang, ‚ÄúHuggingGPT: Solving ai
tasks with chatgpt and its friends in huggingface,‚Äù arXiv preprint arXiv:2303.17580,
2023.
[29] Y. Chen et al., ‚ÄúEmpowering cloud rca with augmented large language models,‚Äù
arXiv preprint arXiv:2311.00000, 2023.
[30] X. Zhou, G. Li, Z. Sun, Z. Liu, W. Chen, J. Wu, J. Liu, R. Feng, and G. Zeng, ‚ÄúD-bot:
Database diagnosis system using large language models,‚Äù 2023.
[31] H. Chen, W. Dou, Y. Jiang, and F. Qin, ‚ÄúUnderstanding exception-related bugs in
large-scale cloud systems,‚Äù in 2019 34th IEEE/ACM International Conference on
Automated Software Engineering (ASE‚Äô19), 2019.
[32] C. Lou, P. Huang, and S. Smith, ‚ÄúUnderstanding, detecting and localizing partial
failures in large system software.‚Äù in Proceedings of the 17th USENIX Symposium
on Networked Systems Design and Implementation (NSDI‚Äô20), 2020.
[33] Y. Liu, C. Pei, L. Xu, B. Chen, M. Sun, Z. Zhang, Y. Sun, S. Zhang, K. Wang,
H. Zhang et al., ‚ÄúOpseval: A comprehensive task-oriented aiops benchmark for
large language models,‚Äù arXiv preprint arXiv:2310.07637, 2023.
[34] M. Li, M. Ma, X. Nie, K. Yin, L. Cao, X. Wen, Z. Yuan, D. Wu, G. Li, W. Liu et al.,
‚ÄúMining fluctuation propagation graph among time series with active learning,‚Äù
in Database and Expert Systems Applications: 33rd International Conference, 2022.
[35] H. Guo, X. Lin, J. Yang, Y. Zhuang, J. Bai, T. Zheng, B. Zhang, and Z. Li, ‚ÄúTranslog:
A unified transformer-based framework for log anomaly detection,‚Äù arXiv preprint
arXiv:2201.00016, 2021.
[36] H. Guo, J. Yang, J. Liu, J. Bai, B. Wang, Z. Li, T. Zheng, B. Zhang, J. Peng, and
Q. Tian, ‚ÄúLogformer: A pre-train and tuning pipeline for log anomaly detection,‚Äù
in Proceedings of the AAAI Conference on Artificial Intelligence, vol. 38, no. 1, 2024,
pp. 135‚Äì143.
[37] H. Guo, Y. Guo, R. Chen, J. Yang, J. Liu, Z. Li, T. Zheng, W. Hou, L. Zheng, and
B. Zhang, ‚ÄúLoglg: Weakly supervised log anomaly detection via log-event graph
construction,‚Äù 2023.
[38] H. Guo, J. Yang, J. Liu, L. Yang, L. Chai, J. Bai, J. Peng, X. Hu, C. Chen,
D. Zhang et al., ‚ÄúOwl: A large language model for it operations,‚Äù arXiv preprint
arXiv:2309.09298, 2023.
[39] W. Zhang, H. Guo, A. Le, J. Yang, J. Liu, Z. Li, T. Zheng, S. Xu, R. Zang, L. Zheng,
and B. Zhang, ‚ÄúLemur: Log parsing with entropy sampling and chain-of-thought
merging,‚Äù 2024.
[40] S. Locke, H. Li, T.-H. P. Chen, W. Shang, and W. Liu, ‚ÄúLogassist: Assisting log
analysis through log summarization,‚Äù IEEE Transactions on Software Engineering,
vol. 48, no. 9, pp. 3227‚Äì3241, 2021.
[41] H. Guo, S. Yuan, and X. Wu, ‚ÄúLogbert: Log anomaly detection via bert,‚Äù in 2021
international joint conference on neural networks (IJCNN).
IEEE, 2021, pp. 1‚Äì8.
[42] Z. Jiang, J. Liu, Z. Chen, Y. Li, J. Huang, Y. Huo, P. He, J. Gu, and M. R. Lyu,
‚ÄúLlmparser: A llm-based log parsing framework,‚Äù arXiv preprint arXiv:2310.01796,
2023.
[43] A. Vaswani, N. M. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser,
and I. Polosukhin, ‚ÄúAttention is all you need,‚Äù NIPS, 2017.
[44] J. Yang, S. Ma, D. Zhang, J. Wan, Z. Li, and M. Zhou, ‚ÄúSmart-start decoding
for neural machine translation,‚Äù in Proceedings of the 2021 Conference of the
North American Chapter of the Association for Computational Linguistics: Human
Language Technologies, 2021, pp. 3982‚Äì3988.
[45] J. Yang, S. Ma, D. Zhang, Z. Li, and M. Zhou, ‚ÄúImproving neural machine transla-
tion with soft template prediction,‚Äù in Proceedings of the 58th Annual Meeting of
the Association for Computational Linguistics, 2020, pp. 5979‚Äì5989.
[46] J. Yang, S. Ma, D. Zhang, S. Wu, Z. Li, and M. Zhou, ‚ÄúAlternating language
modeling for cross-lingual pre-training,‚Äù in Proceedings of the AAAI Conference
on Artificial Intelligence, vol. 34, no. 05, 2020, pp. 9386‚Äì9393.
[47] J. Yang, S. Ma, L. Dong, S. Huang, H. Huang, Y. Yin, D. Zhang, L. Yang, F. Wei,
and Z. Li, ‚ÄúGanlm: Encoder-decoder pre-training with an auxiliary discriminator,‚Äù
arXiv preprint arXiv:2212.10218, 2022.
[48] L. Chai, J. Yang, T. Sun, H. Guo, J. Liu, B. Wang, X. Liang, J. Bai, T. Li, Q. Peng
et al., ‚Äúxcot: Cross-lingual instruction tuning for cross-lingual chain-of-thought
reasoning,‚Äù arXiv preprint arXiv:2401.07037, 2024.
[49] A. Aghajanyan, L. Yu, A. Conneau, W. Hsu, K. Hambardzumyan, S. Zhang,
S. Roller, N. Goyal, O. Levy, and L. Zettlemoyer, ‚ÄúScaling laws for generative
mixed-modal language models,‚Äù in International Conference on Machine Learning,
ICML 2023, 23-29 July 2023, Honolulu, Hawaii, USA, ser. Proceedings of Machine
Learning Research, A. Krause, E. Brunskill, K. Cho, B. Engelhardt, S. Sabato, and
Preprint Submitted to arXiv, 2024,
Wei Zhang, et al.
J. Scarlett, Eds., vol. 202.
PMLR, 2023, pp. 265‚Äì279.
[50] R. Anil, A. M. Dai, O. Firat, M. Johnson, D. Lepikhin, A. Passos, S. Shakeri,
E. Taropa, P. Bailey, Z. Chen, E. Chu, J. H. Clark, L. E. Shafey, Y. Huang, K. Meier-
Hellstern, G. Mishra, E. Moreira, M. Omernick, K. Robinson, S. Ruder, Y. Tay,
K. Xiao, Y. Xu, Y. Zhang, G. H. √Åbrego, J. Ahn, J. Austin, P. Barham, J. A.
Botha, J. Bradbury, S. Brahma, K. Brooks, M. Catasta, Y. Cheng, C. Cherry, C. A.
Choquette-Choo, A. Chowdhery, C. Crepy, S. Dave, M. Dehghani, S. Dev, J. De-
vlin, M. D√≠az, N. Du, E. Dyer, V. Feinberg, F. Feng, V. Fienber, M. Freitag, X. Gar-
cia, S. Gehrmann, L. Gonzalez, and et al., ‚ÄúPalm 2 technical report,‚Äù CoRR, vol.
abs/2305.10403, 2023.
[51] A. Vaswani et al., ‚ÄúAttention is all you need,‚Äù Advances in neural information
processing systems, vol. 30, 2017.
[52] M. Lewis et al., ‚ÄúBart: Denoising sequence-to-sequence pre-training for natural
language generation, translation, and comprehension,‚Äù ACL, 2020.
[53] T. B. Brown et al., ‚ÄúLanguage models are few-shot learners,‚Äù NeurIPS, 2020.
[54] A. Chowdhery et al., ‚ÄúPalm: Scaling language modeling with pathways,‚Äù ArXiv,
2022.
[55] J. Kaplan et al., ‚ÄúScaling laws for neural language models,‚Äù ArXiv, 2020.
[56] L. Ouyang et al., ‚ÄúTraining language models to follow instructions with human
feedback,‚Äù arXiv preprint arXiv:2203.02155, 2022.
[57] J. H. Park et al., ‚ÄúGenerative models as multi-agent systems,‚Äù Journal of Artificial
Intelligence Research, 2023.
[58] L. Sumers et al., ‚ÄúCognitive architectures for autonomous agents: A survey,‚Äù arXiv
preprint arXiv:2302.00000, 2023.
[59] L. Qin et al., ‚ÄúToolllm: Enhancing large language models with external tools for
advanced problem solving,‚Äù arXiv preprint arXiv:2305.00000, 2023.
[60] M. Li et al., ‚ÄúApi-aware language modeling for micro-service architectures,‚Äù arXiv
preprint arXiv:2308.00000, 2023.
[61] X. Jin et al., ‚ÄúAssessing the impact of large language models in cloud service root
cause analysis,‚Äù arXiv preprint arXiv:2309.00000, 2023.
[62] X. Wang, Y. Chen, L. Yuan, Y. Zhang, Y. Li, H. Peng, and H. Ji, ‚ÄúExecutable code
actions elicit better llm agents,‚Äù 2024.
[63] A. Wang et al., ‚ÄúInteractive learning with autonomous agents and large language
models,‚Äù arXiv preprint arXiv:2303.00000, 2023.
[64] Y. Zhou et al., ‚ÄúLlm-based autonomous agents for dynamic environments,‚Äù arXiv
preprint arXiv:2304.00000, 2023.
[65] S. Ahmed et al., ‚ÄúRecommending fixes for cloud service failures with llm-enhanced
tools,‚Äù arXiv preprint arXiv:2310.00000, 2023.
[66] Y. Chen, H. Xie, M. Ma, Y. Kang, X. Gao, L. Shi, Y. Cao, X. Gao, H. Fan, M. Wen,
J. Zeng, S. Ghosh, X. Zhang, C. Zhang, Q. Lin, S. Rajmohan, D. Zhang, and T. Xu,
‚ÄúAutomatic root cause analysis via large language models for cloud incidents,‚Äù
2023.
[67] X. Zhou, X. Peng, T. Xie, J. Sun, C. Ji, W. Li, and D. Ding, ‚ÄúFault analysis and
debugging of microservice systems: Industrial survey, benchmark system, and
empirical study,‚Äù IEEE Transactions on Software Engineering, vol. 47, no. 2, pp.
243‚Äì260, 2018.
[68] B. Li, X. Peng, Q. Xiang, H. Wang, T. Xie, J. Sun, and X. Liu, ‚ÄúEnjoy your ob-
servability: an industrial survey of microservice tracing and analysis,‚Äù Empirical
Software Engineering, vol. 27, pp. 1‚Äì28, 2022.
[69] alibaba. (2021) https://github.com/chaosblade-io/chaosblade. [Online]. Available:
https://github.com/chaosblade-io/chaosblade
[70] I. Abdallah, V. Dertimanis, H. Mylonas, K. Tatsis, E. Chatzi, N. Dervili, K. Worden,
and E. Maguire, ‚ÄúFault diagnosis of wind turbine structures using decision tree
learning algorithms with big data,‚Äù in Safety and Reliability‚ÄìSafe Societies in a
Changing World.
CRC Press, 2018, pp. 3053‚Äì3061.

---
### ÁªìÊûÑÂåñËÆ∫ÊñáÊÄªÁªìÔºömABCÊ°ÜÊû∂Âú®ÂæÆÊúçÂä°Êû∂ÊûÑ‰∏≠ÁöÑÊ†πÂõ†ÂàÜÊûê

---

#### **1. Ê†∏ÂøÉË¥°ÁåÆ**
1. **Â§öÊô∫ËÉΩ‰Ωì‰∏éÂ§ßËØ≠Ë®ÄÊ®°ÂûãÔºàLLMÔºâÂçèÂêåÂàõÊñ∞**  
   ÊèêÂá∫È¶ñ‰∏™Âü∫‰∫éLLMÁöÑÂ§öÊô∫ËÉΩ‰ΩìÂçè‰ΩúÊ°ÜÊû∂ÔºåÈÄöËøá7‰∏™‰∏ì‰∏öÂåñÊô∫ËÉΩ‰ΩìÔºàÂ¶ÇÊï∞ÊçÆ‰æ¶Êé¢„ÄÅ‰æùËµñÂàÜÊûêÂô®ÔºâÂàÜÂ∑•Âçè‰ΩúÔºåÁ™ÅÁ†¥‰º†ÁªüÂçïÊ®°ÂûãÂàÜÊûêÈôêÂà∂ÔºåÊòæËëóÊèêÂçáÊ†πÂõ†ÂàÜÊûêÁ≤æÂ∫¶„ÄÇ

2. **Âå∫ÂùóÈìæÂêØÂèëÁöÑÂéª‰∏≠ÂøÉÂåñÊäïÁ•®Êú∫Âà∂**  
   ÂºïÂÖ•Ë¥°ÁåÆÊåáÊï∞Ôºà$w_c$Ôºâ‰∏é‰∏ìÂÆ∂ÊåáÊï∞Ôºà$w_e$ÔºâÂä®ÊÄÅË∞ÉÊï¥ÊäïÁ•®ÊùÉÈáçÔºåÁªìÂêàÊîØÊåÅÁéáÔºà$s$ÔºâÂíåÂèÇ‰∏éÁéáÔºà$p$ÔºâÈòàÂÄºÂÜ≥Á≠ñÔºåÂ¢ûÂº∫ÂÜ≥Á≠ñÈÄèÊòéÊÄß‰∏éÊäóÂÅèÊÄßÔºåËß£ÂÜ≥LLMËæìÂá∫‰∏çÁ®≥ÂÆöÁöÑÈóÆÈ¢ò„ÄÇ

3. **ÂºÄÊ∫êÂü∫ÂáÜÊï∞ÊçÆÈõÜTrain-Ticket**  
   Âü∫‰∫éÁúüÂÆûÂæÆÊúçÂä°Á≥ªÁªüÊûÑÂª∫ÂåÖÂê´41‰∏™ÊúçÂä°„ÄÅ233,111Êù°Ë∞ÉÁî®ÈìæÁöÑÂ§çÊùÇÂú∫ÊôØÊï∞ÊçÆÈõÜÔºåË¶ÜÁõñÁΩëÁªú„ÄÅÂ≠òÂÇ®„ÄÅCPUÁ≠âÂ§öÁ±ªÊïÖÈöúÔºåÊé®Âä®RCAÁ†îÁ©∂ÁöÑÊ†áÂáÜÂåñËØÑ‰º∞„ÄÇ

---

#### **2. ÊñπÊ≥ïÁªÜËäÇ**
**ÁÆóÊ≥ïÊµÅÁ®ãÔºàÂå∫ÂùóÈìæÊäïÁ•®Ôºâ**  
1. **ÊùÉÈáçËÆ°ÁÆó**  
   - Ë¥°ÁåÆÊåáÊï∞Âä®ÊÄÅÊõ¥Êñ∞Ôºö  
     $$w_c = \min \left( w_c \cdot (1-\delta) + \Delta w_c, \ w_c^{\text{max}} \right)$$  
     Ôºà$\delta$‰∏∫ÈöèÊú∫Ë°∞ÂáèÁéáÔºå$\Delta w_c=0.1$‰∏∫ÂèÇ‰∏éÂ•ñÂä±Ôºâ  
   - ‰∏ìÂÆ∂ÊåáÊï∞Á¥ØÁßØÔºö  
     $$w_e = \min \left( w_e + \Delta w_e, \ w_e^{\text{max}} \right)$$  
     Ôºà$\Delta w_e=¬±0.01$Ê†πÊçÆÊäïÁ•®ÁªìÊûúË∞ÉÊï¥Ôºâ  

2. **ÊäïÁ•®ÂÜ≥Á≠ñ**  
   - ÊîØÊåÅÁéá‰∏éÂèÇ‰∏éÁéáÔºö  
     $$s = \frac{\sum_{i=1}^n 1(w_i)}{\sum_{i=1}^n w_i}, \quad p = \frac{\sum_{i=1}^n 1'(w_i)}{\sum_{i=1}^n w_i}$$  
   - ÈÄöËøáÊù°‰ª∂Ôºö$s \geq \alpha$‰∏î$p \geq \beta$ÔºàÈªòËÆ§$\alpha=0.5$, $\beta=0.5$Ôºâ„ÄÇ

**Êô∫ËÉΩ‰ΩìÂçè‰ΩúÊµÅÁ®ã**  
- **Agent Workflow**ÔºöÊ†πÊçÆ‰ªªÂä°Â§çÊùÇÂ∫¶ÈÄâÊã©Áõ¥Êé•ÂìçÂ∫îÔºàDirect AnswerÔºâÊàñ‰∫§‰∫íÂºèÊé®ÁêÜÔºàReActÂæ™ÁéØÔºâ„ÄÇ  
- **Â§öÊô∫ËÉΩ‰ΩìÂàÜÂ∑•**ÔºöÊµÅÁ®ãË∞ÉÂ∫¶Âô®Ôºà$\mathcal{A}_2$ÔºâÂä®ÊÄÅÊãÜËß£‰ªªÂä°ÔºåÂçèË∞ÉÊï∞ÊçÆ‰æ¶Êé¢Ôºà$\mathcal{A}_3$Ôºâ„ÄÅ‰æùËµñÂàÜÊûêÂô®Ôºà$\mathcal{A}_4$ÔºâÁ≠âÂ≠êÊ®°ÂùóÂçè‰Ωú„ÄÇ

---

#### **3. ÂÆûÈ™åÁªìÊûú**
| **Ê®°Âûã**          | **Train-TicketÊï∞ÊçÆÈõÜÔºàRA/PAÔºâ** | **AIOpsÊåëÊàòÊï∞ÊçÆÈõÜÔºàRA/PAÔºâ** |  
|-------------------|-------------------------------|----------------------------|  
| Decision Tree [70] | 31.8/29.7                     | 23.3/21.7                  |  
| ReAct (GPT-4)     | 32.0/27.9                     | 26.5/23.4                  |  
| **mABC (GPT-4)**  | **72.4/66.2**                 | **63.5/57.3**              |  

- **ÊïàÁéáÊèêÂçá**ÔºömABCÂπ≥ÂùáË∑ØÂæÑÈïøÂ∫¶ÔºàAPL=8.6ÔºâËæÉÂü∫Á∫øÁº©Áü≠40%ÔºåÂÜ≥Á≠ñÈÄöËøáÁéáÔºàPR=84.7%ÔºâÊèêÂçáÊòæËëó„ÄÇ  
- **Ê∂àËûçÂÆûÈ™å**ÔºöÁßªÈô§Â§öÊô∫ËÉΩ‰ΩìÂçè‰ΩúÂØºËá¥RA‰∏ãÈôç34%ÔºåÁßªÈô§ÊäïÁ•®Êú∫Âà∂PAÈôç‰Ωé8.3%„ÄÇ

---

#### **4. ÂõæË°®ÂàÜÊûê**
- **Âõæ2ÔºàmABCÊµÅÁ®ãÔºâ**ÔºöÂ±ïÁ§∫‰ªéÂëäË≠¶Êé•Êî∂‚Üí‰ªªÂä°Ë∞ÉÂ∫¶‚ÜíÊ†πÂõ†ÂÆö‰Ωç‚ÜíËß£ÂÜ≥ÊñπÊ°àÁîüÊàêÁöÑÂÆåÊï¥ÈìæÊù°ÔºåÂá∏ÊòæÂ§öÊô∫ËÉΩ‰ΩìÂàÜÂ∑•‰∏éÊï∞ÊçÆÊµÅÊï¥Âêà„ÄÇ  
- **Âõæ4ÔºàÊäïÁ•®ËøáÁ®ãÔºâ**ÔºöÂèØËßÜÂåñÈìæ‰∏äÊäïÁ•®ÁöÑ‚ÄúÊîØÊåÅ-ÂºÉÊùÉ-ÂèçÂØπ‚Äù‰∏âÈò∂ÊÆµÂÜ≥Á≠ñÈÄªËæëÔºåÊîØÊåÅÁéáËÆ°ÁÆó‰æùËµñÂä®ÊÄÅÊùÉÈáç„ÄÇ  
- **Âõæ5ÔºàTrain-TicketÊû∂ÊûÑÔºâ**ÔºöÊè≠Á§∫ÂæÆÊúçÂä°Èó¥ÁöÑÁéØÂΩ¢‰æùËµñÔºàÂ¶Çbasic-service‚Üíorder-serviceÂæ™ÁéØÔºâÔºåÈ™åËØÅmABCÂ§ÑÁêÜÂ§çÊùÇÊãìÊâëÁöÑ‰ºòÂäø„ÄÇ

---

#### **5. Â∫îÁî®‰ª∑ÂÄº**
- **ËøêÁª¥Ëá™Âä®Âåñ**ÔºöÂáèÂ∞ë‰∫∫Â∑•ÊéíÊü•Êó∂Èó¥90%‰ª•‰∏äÔºåÊîØÊåÅÁßíÁ∫ßÊ†πÂõ†ÂÆö‰Ωç‰∏é‰øÆÂ§çÂª∫ËÆÆÁîüÊàê„ÄÇ  
- **Á≥ªÁªüÁ®≥ÂÆöÊÄß**ÔºöÂú®‰∫ëÂéüÁîüÂú∫ÊôØ‰∏≠Èôç‰ΩéÂπ≥ÂùáÊïÖÈöúÊÅ¢Â§çÊó∂Èó¥ÔºàMTTRÔºâËá≥ÂàÜÈíüÁ∫ßÔºåÊèêÂçáSLAËææÊ†áÁéá„ÄÇ  
- **ÂèØÊâ©Â±ïÊÄß**ÔºöÊ°ÜÊû∂ÊîØÊåÅÁÅµÊ¥ªÊâ©Â±ïÊô∫ËÉΩ‰ΩìÁ±ªÂûãÔºåÈÄÇÁî®‰∫éÊï∞ÊçÆÂ∫ìËØäÊñ≠„ÄÅÊó•ÂøóÂàÜÊûêÁ≠âÊ≥õËøêÁª¥Âú∫ÊôØ„ÄÇ
---
Êú™ÂëΩÂêçËÆ∫Êñá
---
Âõæ 3.6:
¬¢

‚Äò

sma me ese Ee EE ee eee

~m meme ee ew ee ee ee ee

s

cA


Âõæ 3.7:
nd

¬¢

~

ete eee ee ese es es ee ee ee eB Be eK

\
s

~

eS Be B= B= B= Be Be Be Be Be Bw Be Be Be Be Be eB eB eB EB eB EB eB EB EB EE EE Ee

=_‚Äî‚Äî eee ee ee eee ee ee ee ee ee ee ee ee ee

~

a

x

cd

AS
A

a
¬¢


Âõæ 3.8:
=e ee ee /Y

¬¢

~

‚Äî‚Äî eee ee ee ee EE EE

‚Äî‚Äî eee eee

s

=e

¬¢


Âõæ 3.9:
hA


Âõæ 3.10:
see eee eee eee ee ee EE El
~

-

¬¢

x

s

oe

~

~~ eee ee eee ee ee Ee EB BE eB EB eB EB eB EB BE EB eB BP EB EB eB EP SE SE SE Se

=e eee eee ee ee eee eee eee ei ee ee ee ee ee ee

~

a

x

¬¢

s
\

ee ee)

Ul
¬¢


Âõæ 3.12:
\
s

x.

~

SN

?

a
?


Âõæ 3.15:
?
!

¬¢

a

‚Äî_‚Äî‚Äî_‚Äî_s= ee eee ee eee ee ee ee eee ee ee ee ES = /

x

s

ad

=e


Âõæ 3.20:
emepreees

eoFtewweer = === ¬£=¬£=====|=

‚Äú

me se

==


Âõæ 3.41:
probiibihiity ban
. OF =

at oA
¬ß=

l, (0



Âõæ 3.42:
DODPSTITON‚Ñ¢
()

BORcoUE



Âõæ 3.55:
om wee Se Se Se ee Pe eee ee eee ee ee eee ee ee eS Se Se

¬¢

om = = = se we ewe ew eB eB eB Hy

¬¢

~

eee ee ew eB eB eB eB eB eB eB ee ee eB eB eB ee ee ee ee eB ee Ee ee Y

x
‚Äò

a
¬¢


Âõæ 3.63:
emt w twtr ttt ttt,

¬¢

eo= res SB SB SB BB SB SB BE EB EE ee ee eB SB BB EB Ee ee ee ee SS = ly

x

oe

ee |


Âõæ 5.2:
‚Äî=nreereEe Se Se Se Se Se Se ee eee ee ee ee ee ee ee eee

‚Äî_‚Äî‚Äî =

See ee ew ew ew ee ee ee ee ee ee ee eB ee ee ee ee ee ee

mae oe oe


Âõæ 5.10:
eee ee = = = = = = =

bo

ou nee = = = = =

sx

bY

ee ee

~

‚Äî a


Âõæ 5.14:
amos ss sss

‚Äî‚Äî =
‚Äî=‚Äî = oo

e

see eee eee eee eee ee eee ee ee ee ee ee


Âõæ 6.10:
oP

~= = =
